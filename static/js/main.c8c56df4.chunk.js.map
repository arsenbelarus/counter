{"version":3,"sources":["Display/Display.tsx","Button/Button.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","onClick","value","className","Button","disabled","App","useState","maxNumber","setMaxNumber","Number","sessionStorage","getItem","display","setDisplay","incDisabled","setIncDisabled","resetDisabled","setResetDisabled","incClassName","setIncClassName","resetClassName","setResetClassName","displayClassName","setDisplayClassName","maxNumberDisplay","setMaxNumberDisplay","defaultNumberDisplay","setDefaultNumberDisplay","maxNumberClassName","setMaxNumberClassName","defaultNumberClassName","setDefaultNumberClassName","errorSpan","setErrorSpan","id","type","onChange","e","currentTarget","setItem","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8c56df4.chunk.js","sourcesContent":["import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport './Display.css';\r\n\r\nexport type DisplayPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & { onEnter?: () => void, value?: number, className: string };\r\n\r\nconst Display: React.FC<DisplayPropsType> = ({onClick, value, className, ...restProps}) => {\r\n    return (\r\n        <div className=\"Display\">\r\n            <input value={value} className={className}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport './Button.css';\r\n\r\nexport type ButtonNyaPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    & { onClick?: () => void, value?: string, disabled?: boolean, className: string };\r\n\r\nconst Button: React.FC<ButtonNyaPropsType> = ({onClick, value, disabled, className, ...restProps}) => {\r\n    return (\r\n        <>\r\n            <button className={className} onClick={onClick}\r\n                    disabled={disabled}> {value} </button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport Display from \"./Display/Display\";\nimport Button from \"./Button/Button\";\n\nfunction App() {\n    //************************************************** СТЭЙТ И ФУНКЦИИ ОСНОВНОГО СЧЕТЧИКА ***************************************************************************\n    let [maxNumber, setMaxNumber] = useState<number>()\n    let [display, setDisplay] = useState(Number(sessionStorage.getItem(\"defaultNumberDisplay\")))                                                               // отображение чисел на дисплее основного счетчика\n    let [incDisabled, setIncDisabled] = useState<boolean>(false)                                           // делает кнопку инкремент недоступной\n    let [resetDisabled, setResetDisabled] = useState<boolean>(true)                                        // делает кнопку ресет недоступной\n    let [incClassName, setIncClassName] = useState<\"Button\"|\"ButtonDisabled\">(\"ButtonDisabled\")            // меняем классы инкремента\n    let [resetClassName, setResetClassName] = useState<\"Button\"|\"ButtonDisabled\">(\"ButtonDisabled\")        // меняем классы ресета\n    let [displayClassName, setDisplayClassName] = useState<\"textareaStart\"|\"textareaEnd\">(\"textareaStart\") // меняем классы дисплея\n    const increment = () => {\n        setDisplay(++display)\n        setResetDisabled (false)\n        setResetClassName (\"Button\")\n\n        if (display === maxNumber) {\n            setIncDisabled(true)\n            setIncClassName(\"ButtonDisabled\")\n            setDisplayClassName (\"textareaEnd\")\n        }\n    }                                                                                   // функция, обслуживающая кнопку инкремент\n    const reset = () => {\n        setDisplay((Number(defaultNumberDisplay)))\n        setResetDisabled (true)\n        setResetClassName (\"ButtonDisabled\")\n        setIncDisabled(false)\n        setIncClassName(\"Button\")\n        setDisplayClassName(\"textareaStart\")\n    }                                                                                       // функция, обслуживающая кнопку ресет\n\n    //*************************************************** СТЭЙТ И ФУНКЦИИ УСТАНОВОЧНОГО БЛОКА *************************************************************************\n\n    let [maxNumberDisplay, setMaxNumberDisplay] = useState<number>(Number(sessionStorage.getItem(\"maxNumberDisplay\")))                 //отвечает за отображение данных на табло с максимальным числом\n    let [defaultNumberDisplay, setDefaultNumberDisplay] = useState<number>(Number(sessionStorage.getItem(\"defaultNumberDisplay\")))     //отвечает за отображение данных на табло с начальным числом\n    let [maxNumberClassName, setMaxNumberClassName] = useState<\"inputNumber\"|\"inputNumberError\">(\"inputNumber\")                 // классы\n    let [defaultNumberClassName, setDefaultNumberClassName] = useState<\"inputNumber\"|\"inputNumberError\">(\"inputNumber\")         // классы\n    let [errorSpan, setErrorSpan] = useState(false)                                                                             // стэйт с ошибкой\n    const onMaxNumberDisplayChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxNumberDisplay(Number(e.currentTarget.value))\n        setErrorSpan (false)\n        setMaxNumberClassName(\"inputNumber\")\n        setDefaultNumberClassName(\"inputNumber\")\n        setIncDisabled(false)\n    }\n    const onDefaultNumberDisplayChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setDefaultNumberDisplay(Number(e.currentTarget.value))\n        setErrorSpan (false)\n        setMaxNumberClassName(\"inputNumber\")\n        setDefaultNumberClassName(\"inputNumber\")\n        setIncDisabled(false)\n    }\n    const onCloseHandler = () => {\n        setErrorSpan(false)\n        setMaxNumberDisplay(1)\n        setDefaultNumberDisplay(0)\n        setMaxNumberClassName(\"inputNumber\")\n        setDefaultNumberClassName(\"inputNumber\")\n        setDisplay(0)\n        setIncDisabled(true)\n        setIncClassName(\"ButtonDisabled\")\n        setResetDisabled(true)\n        setResetClassName(\"ButtonDisabled\")\n    }\n    const setHandler = () => {\n        if (defaultNumberDisplay >= 0 && maxNumberDisplay>defaultNumberDisplay) {                       // проверяем на условие об ошибке\n            setMaxNumberClassName(\"inputNumber\")\n            setDefaultNumberClassName(\"inputNumber\")\n            setMaxNumber(maxNumberDisplay)\n            setDisplay (defaultNumberDisplay)                                                             //  устанавливаем значение основного дисплея справа\n            setIncClassName(\"Button\")                                                               //  делаем активной кнопку инкремента\n            setIncDisabled (false)                                                                  //  делаем активной кнопку инкремента\n            sessionStorage.setItem(\"maxNumberDisplay\", JSON.stringify(maxNumberDisplay))                      // записываем оба значения в локал сторэдж\n            sessionStorage.setItem(\"defaultNumberDisplay\", JSON.stringify(defaultNumberDisplay))              // записываем оба значения в локал сторэдж\n        } else {\n            setMaxNumberClassName(\"inputNumberError\")\n            setDefaultNumberClassName(\"inputNumberError\")\n            setErrorSpan(true)\n            setIncClassName(\"ButtonDisabled\")\n            setIncDisabled (true)\n        }\n    }\n\n    \n    return (\n        <div className={\"main\"}>\n            <div className=\"App\">\n                <span className=\"span\"> Max number </span>\n                <input id={\"max-number\"} type={\"number\"} className={maxNumberClassName} value={maxNumberDisplay} onChange={onMaxNumberDisplayChangeHandler}/>\n                <span className=\"span\"> Default number </span>\n                <input type={\"number\"} className={defaultNumberClassName} value={defaultNumberDisplay} onChange={onDefaultNumberDisplayChangeHandler}/>\n\n                <div className={\"ButtonContainer\"}>\n                    <Button value={\"SET\"} onClick={setHandler} className={\"Button\"}/>\n                </div>\n            </div>\n            { errorSpan && <div className=\"errorDiv\">\n                <Button value={\"X\"} onClick={onCloseHandler} className={\"Button\"}/>\n                <span className=\"errorSpan\"> Counter's max number should be bigger than default </span>\n                <span className=\"errorSpan\"> Counter's default number should not be negative </span>\n            </div>}\n            <div className=\"App\">\n                <Display value={display} className={displayClassName}/>\n                <div className={\"ButtonContainer\"}>\n                    <Button value={\"INC\"} onClick={increment} disabled={incDisabled} className={incClassName}/>\n                    <Button value={\"RES\"} onClick={reset} disabled={resetDisabled} className={resetClassName}/>\n                </div>\n            </div>\n        </div>\n\n    );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}